//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   64
    PointLight gPointLight;             // Offset:   64, size:   80
    SpotLight gSpotLight;               // Offset:  144, size:   96
    float3  gEyePosW;                   // Offset:  240, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(16);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 LiftTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Att;                    // Offset:  128
                //       float pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Att;                    // Offset:  224
                //       float pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[16], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 19
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                mov r3.xyz, l(0,0,0,0)
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r13.xyz, l(0,0,0,0)
                mov r14.xyz, l(0,0,0,0)
                mov r12.xyz, -r12.xyzx
                mul r6.xyz, r6.xyzx, r9.xyzx
                dp3 r0.w, r12.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                mov r8.xyz, r8.xyzx
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[4].xyzx
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx
                mov r0.w, cb0[7].w
                mov r13.xyz, cb0[8].xyzx
                mov r14.xyz, v1.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r15.xyz, l(0,0,0,0)
                mov r16.xyz, l(0,0,0,0)
                mov r17.xyz, l(0,0,0,0)
                mov r14.xyz, -r14.xyzx
                add r12.xyz, r12.xyzx, r14.xyzx
                dp3 r1.w, r12.xyzx, r12.xyzx
                sqrt r14.y, r1.w
                lt r0.w, r0.w, r14.y
                if_z r0.w
                  div r12.xyz, r12.xyzx, r14.yyyy
                  mul r15.xyz, r6.xyzx, r9.xyzx
                  dp3 r0.w, r12.xyzx, r0.xyzx
                  lt r1.w, l(0.000000), r0.w
                  mov r6.xyz, -r12.xyzx
                  dp3 r3.w, r6.xyzx, r0.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r9.xyz, r0.xyzx, r3.wwww
                  add r6.xyz, r6.xyzx, r9.xyzx
                  dp3 r3.w, r6.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r8.w
                  exp r3.w, r3.w
                  mul r6.xyz, r7.xyzx, r0.wwww
                  mul r6.xyz, r10.xyzx, r6.xyzx
                  mul r7.xyz, r8.xyzx, r3.wwww
                  mul r7.xyz, r11.xyzx, r7.xyzx
                  movc r6.xyz, r1.wwww, r6.xyzx, r16.xyzx
                  movc r7.xyz, r1.wwww, r7.xyzx, r17.xyzx
                  mul r14.z, r14.y, r14.y
                  mov r14.x, l(1.000000)
                  dp3 r0.w, r13.xyzx, r14.xyzx
                  div r0.w, l(1.000000), r0.w
                  mul r16.xyz, r0.wwww, r6.xyzx
                  mul r17.xyz, r0.wwww, r7.xyzx
                endif 
                mov r15.xyz, r15.xyzx
                mov r16.xyz, r16.xyzx
                mov r17.xyz, r17.xyzx
                add r3.xyz, r3.xyzx, r15.xyzx
                add r4.xyz, r4.xyzx, r16.xyzx
                add r5.xyz, r5.xyzx, r17.xyzx
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[9].xyzx
                mov r10.xyz, cb0[10].xyzx
                mov r11.xyz, cb0[11].xyzx
                mov r12.xyz, cb0[12].xyzx
                mov r13.xyz, cb0[13].xyzx
                mov r14.xyz, cb0[14].xyzx
                mov r0.w, cb0[12].w
                mov r1.w, cb0[13].w
                mov r15.xyz, v1.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r16.xyz, l(0,0,0,0)
                mov r17.xyz, l(0,0,0,0)
                mov r18.xyz, l(0,0,0,0)
                mov r15.xyz, -r15.xyzx
                add r12.xyz, r12.xyzx, r15.xyzx
                dp3 r3.w, r12.xyzx, r12.xyzx
                sqrt r15.y, r3.w
                lt r0.w, r0.w, r15.y
                if_z r0.w
                  div r12.xyz, r12.xyzx, r15.yyyy
                  mul r6.xyz, r6.xyzx, r9.xyzx
                  dp3 r0.w, r12.xyzx, r0.xyzx
                  lt r3.w, l(0.000000), r0.w
                  mov r9.xyz, -r12.xyzx
                  dp3 r4.w, r9.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mov r4.w, -r4.w
                  mul r0.xyz, r0.xyzx, r4.wwww
                  add r0.xyz, r9.xyzx, r0.xyzx
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r8.w
                  exp r0.x, r0.x
                  mul r0.yzw, r7.xxyz, r0.wwww
                  mul r0.yzw, r10.xxyz, r0.yyzw
                  mul r1.xyz, r8.xyzx, r0.xxxx
                  mul r1.xyz, r11.xyzx, r1.xyzx
                  movc r0.xyz, r3.wwww, r0.yzwy, r17.xyzx
                  movc r1.xyz, r3.wwww, r1.xyzx, r18.xyzx
                  mov r7.xyz, -r12.xyzx
                  dp3 r0.w, r7.xyzx, r13.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.w
                  exp r0.w, r0.w
                  mul r15.z, r15.y, r15.y
                  mov r15.x, l(1.000000)
                  dp3 r1.w, r14.xyzx, r15.xyzx
                  div r1.w, r0.w, r1.w
                  mul r16.xyz, r0.wwww, r6.xyzx
                  mul r17.xyz, r0.xyzx, r1.wwww
                  mul r18.xyz, r1.wwww, r1.xyzx
                endif 
                mov r16.xyz, r16.xyzx
                mov r17.xyz, r17.xyzx
                mov r18.xyz, r18.xyzx
                add r0.xyz, r3.xyzx, r16.xyzx
                add r1.xyz, r4.xyzx, r17.xyzx
                add r3.xyz, r5.xyzx, r18.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r3.xyzx, r0.xyzx
                mul r0.w, r2.w, cb1[17].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 176 instruction slots used
                            
            };
        }

    }

}

