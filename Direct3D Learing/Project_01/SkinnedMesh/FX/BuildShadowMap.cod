//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
    float   gHeightScale;               // Offset:   12, size:    4
    float   gMaxTessDistance;           // Offset:   16, size:    4
    float   gMinTessDistance;           // Offset:   20, size:    4
    float   gMinTessFactor;             // Offset:   24, size:    4
    float   gMaxTessFactor;             // Offset:   28, size:    4
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gWorldViewProj;            // Offset:  192, size:   64
    float4x4 gTexTransform;             // Offset:  256, size:   64
}

cbuffer cbSkinned
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 4 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 BuildShadowMapTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o1.x <- <VS return value>.Tex.x; o1.y <- <VS return value>.Tex.y; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 75 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[12].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[13].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[14].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[15].xyzw  // r1.w <- vout.PosH.w
                
                #line 76
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r2.x, r0.xyzw, cb0[16].xyzw  // r2.x <- vout.Tex.x
                dp4 r2.y, r0.xyzw, cb0[17].xyzw  // r2.y <- vout.Tex.y
                
                #line 78
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
            RasterizerState = Depth;
        }

    }

    technique11 BuildShadowMapAlphaClipTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o1.x <- <VS return value>.Tex.x; o1.y <- <VS return value>.Tex.y; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 75 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[12].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[13].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[14].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[15].xyzw  // r1.w <- vout.PosH.w
                
                #line 76
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r2.x, r0.xyzw, cb0[16].xyzw  // r2.x <- vout.Tex.x
                dp4 r2.y, r0.xyzw, cb0[17].xyzw  // r2.y <- vout.Tex.y
                
                #line 78
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y
                //
                #line 240 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // r0.x <- diffuse.w
                
                #line 243
                mov r0.y, l(-0.150000)
                add r0.x, r0.y, r0.x
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard_nz r0.x
                
                #line 244
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMapSkinnedTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyzw        3     NONE   float       
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; v3.w <- vin.TangentL.w; 
                //   v4.x <- vin.Weights.x; v4.y <- vin.Weights.y; v4.z <- vin.Weights.z; 
                //   v5.x <- vin.BoneIndices.x; v5.y <- vin.BoneIndices.y; v5.z <- vin.BoneIndices.z; v5.w <- vin.BoneIndices.w; 
                //   o1.x <- <SkinnedVS return value>.Tex.x; o1.y <- <SkinnedVS return value>.Tex.y; 
                //   o0.x <- <SkinnedVS return value>.PosH.x; o0.y <- <SkinnedVS return value>.PosH.y; o0.z <- <SkinnedVS return value>.PosH.z; o0.w <- <SkinnedVS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 87 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov x0[0].x, v4.x
                
                #line 88
                mov x0[1].x, v4.y
                
                #line 89
                mov x0[2].x, v4.z
                
                #line 90
                mov r0.x, x0[0].x
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, x0[1].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov r0.y, x0[2].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x
                
                #line 92
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 93
                mov r0.w, l(0)  // r0.w <- i
                mov r1.xyz, r0.xyzx  // r1.x <- posL.x; r1.y <- posL.y; r1.z <- posL.z
                mov r2.x, r0.w  // r2.x <- i
                loop 
                  ilt r2.y, r2.x, l(4)
                  breakc_z r2.y
                
                #line 97
                  mov r2.y, x0[r2.x + 0].x
                  and r3.xyzw, v5.xyzw, icb[r2.x + 0].xyzw
                  or r2.zw, r3.yyyw, r3.xxxz
                  or r2.z, r2.w, r2.z
                  imul null, r2.z, r2.z, l(4)
                  mov r3.xyz, v0.xyzx
                  mov r3.w, l(1.000000)
                  dp4 r4.x, r3.xyzw, cb1[r2.z + 0].xyzw
                  dp4 r4.y, r3.xyzw, cb1[r2.z + 1].xyzw
                  dp4 r4.z, r3.xyzw, cb1[r2.z + 2].xyzw
                  mul r2.yzw, r2.yyyy, r4.xxyz
                  add r1.xyz, r1.xyzx, r2.yzwy
                
                #line 98
                  iadd r2.x, r2.x, l(1)
                endloop 
                
                #line 101
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[12].xyzw  // r0.x <- vout.PosH.x
                dp4 r0.y, r1.xyzw, cb0[13].xyzw  // r0.y <- vout.PosH.y
                dp4 r0.z, r1.xyzw, cb0[14].xyzw  // r0.z <- vout.PosH.z
                dp4 r0.w, r1.xyzw, cb0[15].xyzw  // r0.w <- vout.PosH.w
                
                #line 104
                mov r1.xy, v2.xyxx
                mov r1.zw, l(0,0,0,1.000000)
                dp4 r2.x, r1.xyzw, cb0[16].xyzw  // r2.x <- vout.Tex.x
                dp4 r2.y, r1.xyzw, cb0[17].xyzw  // r2.y <- vout.Tex.y
                
                #line 106
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 46 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
            RasterizerState = Depth;
        }

    }

    technique11 BuildShadowMapAlphaClipSkinnedTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyzw        3     NONE   float       
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 5
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; v3.w <- vin.TangentL.w; 
                //   v4.x <- vin.Weights.x; v4.y <- vin.Weights.y; v4.z <- vin.Weights.z; 
                //   v5.x <- vin.BoneIndices.x; v5.y <- vin.BoneIndices.y; v5.z <- vin.BoneIndices.z; v5.w <- vin.BoneIndices.w; 
                //   o1.x <- <SkinnedVS return value>.Tex.x; o1.y <- <SkinnedVS return value>.Tex.y; 
                //   o0.x <- <SkinnedVS return value>.PosH.x; o0.y <- <SkinnedVS return value>.PosH.y; o0.z <- <SkinnedVS return value>.PosH.z; o0.w <- <SkinnedVS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 87 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov x0[0].x, v4.x
                
                #line 88
                mov x0[1].x, v4.y
                
                #line 89
                mov x0[2].x, v4.z
                
                #line 90
                mov r0.x, x0[0].x
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, x0[1].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov r0.y, x0[2].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x
                
                #line 92
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 93
                mov r0.w, l(0)  // r0.w <- i
                mov r1.xyz, r0.xyzx  // r1.x <- posL.x; r1.y <- posL.y; r1.z <- posL.z
                mov r2.x, r0.w  // r2.x <- i
                loop 
                  ilt r2.y, r2.x, l(4)
                  breakc_z r2.y
                
                #line 97
                  mov r2.y, x0[r2.x + 0].x
                  and r3.xyzw, v5.xyzw, icb[r2.x + 0].xyzw
                  or r2.zw, r3.yyyw, r3.xxxz
                  or r2.z, r2.w, r2.z
                  imul null, r2.z, r2.z, l(4)
                  mov r3.xyz, v0.xyzx
                  mov r3.w, l(1.000000)
                  dp4 r4.x, r3.xyzw, cb1[r2.z + 0].xyzw
                  dp4 r4.y, r3.xyzw, cb1[r2.z + 1].xyzw
                  dp4 r4.z, r3.xyzw, cb1[r2.z + 2].xyzw
                  mul r2.yzw, r2.yyyy, r4.xxyz
                  add r1.xyz, r1.xyzx, r2.yzwy
                
                #line 98
                  iadd r2.x, r2.x, l(1)
                endloop 
                
                #line 101
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[12].xyzw  // r0.x <- vout.PosH.x
                dp4 r0.y, r1.xyzw, cb0[13].xyzw  // r0.y <- vout.PosH.y
                dp4 r0.z, r1.xyzw, cb0[14].xyzw  // r0.z <- vout.PosH.z
                dp4 r0.w, r1.xyzw, cb0[15].xyzw  // r0.w <- vout.PosH.w
                
                #line 104
                mov r1.xy, v2.xyxx
                mov r1.zw, l(0,0,0,1.000000)
                dp4 r2.x, r1.xyzw, cb0[16].xyzw  // r2.x <- vout.Tex.x
                dp4 r2.y, r1.xyzw, cb0[17].xyzw  // r2.y <- vout.Tex.y
                
                #line 106
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 46 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y
                //
                #line 240 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // r0.x <- diffuse.w
                
                #line 243
                mov r0.y, l(-0.150000)
                add r0.x, r0.y, r0.x
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard_nz r0.x
                
                #line 244
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 TessBuildShadowMapTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float gHeightScale;                // Offset:   12 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:   16 Size:     4
                //   float gMinTessDistance;            // Offset:   20 Size:     4
                //   float gMinTessFactor;              // Offset:   24 Size:     4
                //   float gMaxTessFactor;              // Offset:   28 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TESS                     0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[2], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o2.x <- <TessVS return value>.Tex.x; o2.y <- <TessVS return value>.Tex.y; o2.z <- <TessVS return value>.TessFactor; 
                //   o1.x <- <TessVS return value>.NormalW.x; o1.y <- <TessVS return value>.NormalW.y; o1.z <- <TessVS return value>.NormalW.z; 
                //   o0.x <- <TessVS return value>.PosW.x; o0.y <- <TessVS return value>.PosW.y; o0.z <- <TessVS return value>.PosW.z
                //
                #line 121 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 122
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 123
                mov r2.xy, v2.xyxx
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r3.x, r2.xyzw, cb1[16].xyzw  // r3.x <- vout.Tex.x
                dp4 r3.y, r2.xyzw, cb1[17].xyzw  // r3.y <- vout.Tex.y
                
                #line 125
                mov r2.xyz, -cb0[0].xyzx
                add r2.xyz, r1.xyzx, r2.xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 131
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[1].y
                mov r1.w, -cb0[1].x
                add r1.w, r1.w, cb0[1].y
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 134
                mov r1.w, -cb0[1].z
                add r1.w, r1.w, cb0[1].w
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[1].z  // r0.w <- vout.TessFactor
                
                #line 136
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xy, r3.xyxx
                mov o2.z, r0.w
                ret 
                // Approximately 32 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TESS                     0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o2.x <- <HS return value>.Tex.x; o2.y <- <HS return value>.Tex.y; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].Tex.x; v[0][2].y <- p[0].Tex.y; v[0][2].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].Tex.x; v[1][2].y <- p[1].Tex.y; v[1][2].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].Tex.x; v[2][2].y <- p[2].Tex.y; v[2][2].z <- p[2].TessFactor
                //
                #line 182 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 183
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 184
                mov r2.xy, v[r0.x + 0][2].xyxx  // r2.x <- hout.Tex.x; r2.y <- hout.Tex.y
                
                #line 186
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xy, r2.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][2].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 155
                add r0.x, vicp[2][2].z, vicp[1][2].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 156
                add r0.y, vicp[0][2].z, vicp[2][2].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 157
                add r0.z, vicp[1][2].z, vicp[0][2].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 158
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 160
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 20 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float gHeightScale;                // Offset:   12 Size:     4
                //   float gMaxTessDistance;            // Offset:   16 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:   20 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:   24 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:   28 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o3.x <- <DS return value>.Tex.x; o3.y <- <DS return value>.Tex.y; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].Tex.x; vicp[0][2].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].Tex.x; vicp[1][2].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].Tex.x; vicp[2][2].y <- tri[2].Tex.y
                //
                #line 207 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 208
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 209
                mul r2.xy, vDomain.xxxx, vicp[0][2].xyxx
                mul r2.zw, vDomain.yyyy, vicp[1][2].xxxy
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.zw, vDomain.zzzz, vicp[2][2].xxxy
                add r2.xy, r2.zwzz, r2.xyxx  // r2.x <- dout.Tex.x; r2.y <- dout.Tex.y
                
                #line 212
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 220
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 221
                mov r3.xyz, -cb0[0].xyzx
                add r3.xyz, r0.xyzx, r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r1.w, r1.w
                mov r2.z, -r0.w
                add r1.w, r1.w, r2.z
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 224
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r2.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 227
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[0].w
                mul r3.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r3.xyzx
                
                #line 230
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- dout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- dout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- dout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- dout.PosH.w
                
                #line 232
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r2.xyxx
                ret 
                // Approximately 45 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
            RasterizerState = Depth;
        }

    }

    technique11 TessBuildShadowMapAlphaClipTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float gHeightScale;                // Offset:   12 Size:     4 [unused]
                //   float gMaxTessDistance;            // Offset:   16 Size:     4
                //   float gMinTessDistance;            // Offset:   20 Size:     4
                //   float gMinTessFactor;              // Offset:   24 Size:     4
                //   float gMaxTessFactor;              // Offset:   28 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TESS                     0     z         2     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[2], immediateIndexed
                dcl_constantbuffer CB1[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o2.x <- <TessVS return value>.Tex.x; o2.y <- <TessVS return value>.Tex.y; o2.z <- <TessVS return value>.TessFactor; 
                //   o1.x <- <TessVS return value>.NormalW.x; o1.y <- <TessVS return value>.NormalW.y; o1.z <- <TessVS return value>.NormalW.z; 
                //   o0.x <- <TessVS return value>.PosW.x; o0.y <- <TessVS return value>.PosW.y; o0.z <- <TessVS return value>.PosW.z
                //
                #line 121 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 122
                dp3 r0.x, v1.xyzx, cb1[4].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb1[5].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb1[6].xyzx  // r0.z <- vout.NormalW.z
                
                #line 123
                mov r2.xy, v2.xyxx
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r3.x, r2.xyzw, cb1[16].xyzw  // r3.x <- vout.Tex.x
                dp4 r3.y, r2.xyzw, cb1[17].xyzw  // r3.y <- vout.Tex.y
                
                #line 125
                mov r2.xyz, -cb0[0].xyzx
                add r2.xyz, r1.xyzx, r2.xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                sqrt r0.w, r0.w  // r0.w <- d
                
                #line 131
                mov r0.w, -r0.w
                add r0.w, r0.w, cb0[1].y
                mov r1.w, -cb0[1].x
                add r1.w, r1.w, cb0[1].y
                div r0.w, r0.w, r1.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- tess
                
                #line 134
                mov r1.w, -cb0[1].z
                add r1.w, r1.w, cb0[1].w
                mul r0.w, r0.w, r1.w
                add r0.w, r0.w, cb0[1].z  // r0.w <- vout.TessFactor
                
                #line 136
                mov o0.xyz, r1.xyzx
                mov o1.xyz, r0.xyzx
                mov o2.xy, r3.xyxx
                mov o2.z, r0.w
                ret 
                // Approximately 32 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TESS                     0     z         2     NONE   float     z 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xy
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o2.x <- <HS return value>.Tex.x; o2.y <- <HS return value>.Tex.y; 
                //   o1.x <- <HS return value>.NormalW.x; o1.y <- <HS return value>.NormalW.y; o1.z <- <HS return value>.NormalW.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; 
                //   v[0][1].x <- p[0].NormalW.x; v[0][1].y <- p[0].NormalW.y; v[0][1].z <- p[0].NormalW.z; 
                //   v[0][2].x <- p[0].Tex.x; v[0][2].y <- p[0].Tex.y; v[0][2].z <- p[0].TessFactor; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; 
                //   v[1][1].x <- p[1].NormalW.x; v[1][1].y <- p[1].NormalW.y; v[1][1].z <- p[1].NormalW.z; 
                //   v[1][2].x <- p[1].Tex.x; v[1][2].y <- p[1].Tex.y; v[1][2].z <- p[1].TessFactor; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; 
                //   v[2][1].x <- p[2].NormalW.x; v[2][1].y <- p[2].NormalW.y; v[2][1].z <- p[2].NormalW.z; 
                //   v[2][2].x <- p[2].Tex.x; v[2][2].y <- p[2].Tex.y; v[2][2].z <- p[2].TessFactor
                //
                #line 182 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                
                #line 183
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalW.x; r1.y <- hout.NormalW.y; r1.z <- hout.NormalW.z
                
                #line 184
                mov r2.xy, v[r0.x + 0][2].xyxx  // r2.x <- hout.Tex.x; r2.y <- hout.Tex.y
                
                #line 186
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xy, r2.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][2].z
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 155
                add r0.x, vicp[2][2].z, vicp[1][2].z
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                
                #line 156
                add r0.y, vicp[0][2].z, vicp[2][2].z
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                
                #line 157
                add r0.z, vicp[1][2].z, vicp[0][2].z
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                
                #line 158
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                
                #line 160
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 20 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float gHeightScale;                // Offset:   12 Size:     4
                //   float gMaxTessDistance;            // Offset:   16 Size:     4 [unused]
                //   float gMinTessDistance;            // Offset:   20 Size:     4 [unused]
                //   float gMinTessFactor;              // Offset:   24 Size:     4 [unused]
                //   float gMaxTessFactor;              // Offset:   28 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o3.x <- <DS return value>.Tex.x; o3.y <- <DS return value>.Tex.y; 
                //   o2.x <- <DS return value>.NormalW.x; o2.y <- <DS return value>.NormalW.y; o2.z <- <DS return value>.NormalW.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalW.x; vicp[0][1].y <- tri[0].NormalW.y; vicp[0][1].z <- tri[0].NormalW.z; 
                //   vicp[0][2].x <- tri[0].Tex.x; vicp[0][2].y <- tri[0].Tex.y; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalW.x; vicp[1][1].y <- tri[1].NormalW.y; vicp[1][1].z <- tri[1].NormalW.z; 
                //   vicp[1][2].x <- tri[1].Tex.x; vicp[1][2].y <- tri[1].Tex.y; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalW.x; vicp[2][1].y <- tri[2].NormalW.y; vicp[2][1].z <- tri[2].NormalW.z; 
                //   vicp[2][2].x <- tri[2].Tex.x; vicp[2][2].y <- tri[2].Tex.y
                //
                #line 207 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 208
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalW.x; r1.y <- dout.NormalW.y; r1.z <- dout.NormalW.z
                
                #line 209
                mul r2.xy, vDomain.xxxx, vicp[0][2].xyxx
                mul r2.zw, vDomain.yyyy, vicp[1][2].xxxy
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.zw, vDomain.zzzz, vicp[2][2].xxxy
                add r2.xy, r2.zwzz, r2.xyxx  // r2.x <- dout.Tex.x; r2.y <- dout.Tex.y
                
                #line 212
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                
                #line 220
                mov r0.w, l(20.000000)  // r0.w <- MipInterval
                
                #line 221
                mov r3.xyz, -cb0[0].xyzx
                add r3.xyz, r0.xyzx, r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r1.w, r1.w
                mov r2.z, -r0.w
                add r1.w, r1.w, r2.z
                div r0.w, r1.w, r0.w
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(6.000000)  // r0.w <- mipLevel
                
                #line 224
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r2.xyxx, t0.xyzw, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 227
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, cb0[0].w
                mul r3.xyz, r1.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r3.xyzx
                
                #line 230
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- dout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- dout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- dout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- dout.PosH.w
                
                #line 232
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r2.xyxx
                ret 
                // Approximately 45 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y
                //
                #line 251 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\BuildShadowMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v3.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // r0.x <- diffuse.w
                
                #line 254
                mov r0.y, l(-0.150000)
                add r0.x, r0.y, r0.x
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard_nz r0.x
                
                #line 255
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

}

