//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float   gTexelWidth;                // Offset:    0, size:    4
    float   gTexelHeight;               // Offset:    4, size:    4
}

cbuffer cbSettings
{
    float   gWeights[11] = { 0.0500000007, 0.0500000007, 0.100000001, 0.100000001, 0.100000001, 0.200000003, 0.100000001, 0.100000001, 0.100000001, 0.0500000007, 0.0500000007 };// Offset:    0, size:  164
}

//
// 4 local object(s)
//
Texture2D gNormalDepthMap;
Texture2D gInputImage;
SamplerState samNormalDepth
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samInputImage
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 HorzBlur
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o1.x <- <VS return value>.Tex.x; o1.y <- <VS return value>.Tex.y; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 69 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoBlur.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosH.x; r0.y <- vout.PosH.y; r0.z <- vout.PosH.z
                mov r0.w, l(1.000000)  // r0.w <- vout.PosH.w
                
                #line 72
                mov r1.xy, v2.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y
                
                #line 74
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gTexelWidth;                 // Offset:    0 Size:     4
                //   float gTexelHeight;                // Offset:    4 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSettings
                // {
                //
                //   float gWeights[11];                // Offset:    0 Size:   164
                //      = 0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samNormalDepth                    sampler      NA          NA             s0      1 
                // samInputImage                     sampler      NA          NA             s1      1 
                // gNormalDepthMap                   texture  float4          2d             t0      1 
                // gInputImage                       texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbSettings                        cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[11], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 28 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoBlur.fx"
                mov r0.x, l(5)  // r0.x <- gBlurRadius
                
                #line 83
                mov r1.x, cb0[0].x  // r1.x <- texOffset.x
                mov r1.y, l(0)  // r1.y <- texOffset.y
                
                #line 91
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)
                mul r2.xyzw, r2.xyzw, cb1[5].xxxx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z; r2.w <- color.w
                
                #line 92
                mov r0.y, cb1[5].x  // r0.y <- totalWeight
                
                #line 94
                sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r3.x <- centerNormalDepth.x; r3.y <- centerNormalDepth.y; r3.z <- centerNormalDepth.z; r3.w <- centerNormalDepth.w
                
                #line 96
                itof r0.z, l(-5)  // r0.z <- i
                mov r4.xyzw, r2.xyzw  // r4.x <- color.x; r4.y <- color.y; r4.z <- color.z; r4.w <- color.w
                mov r0.w, r0.y  // r0.w <- totalWeight
                mov r1.z, r0.z  // r1.z <- i
                loop 
                  itof r1.w, r0.x
                  ge r1.w, r1.w, r1.z
                  breakc_z r1.w
                
                #line 99
                  itof r1.w, l(0)
                  eq r5.x, r1.w, r1.z
                  if_nz r5.x
                    mov r1.w, r1.w  // r1.w <- i
                
                #line 100
                    add r1.z, r1.w, l(1.000000)  // r1.z <- i
                    continue 
                  endif 
                
                #line 102
                  mul r5.xy, r1.xyxx, r1.zzzz
                  add r5.xy, r5.xyxx, v1.xyxx  // r5.x <- tex.x; r5.y <- tex.y
                
                #line 104
                  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)  // r6.x <- neighborNormalDepth.x; r6.y <- neighborNormalDepth.y; r6.z <- neighborNormalDepth.z; r6.w <- neighborNormalDepth.w
                
                #line 113
                  dp3 r1.w, r6.xyzx, r3.xyzx
                  ge r1.w, r1.w, l(0.800000)
                  mov r5.z, -r3.w
                  add r5.z, r5.z, r6.w
                  mov r5.w, -r5.z
                  max r5.z, r5.w, r5.z
                  ge r5.z, l(0.200000), r5.z
                  and r1.w, r1.w, r5.z
                  if_nz r1.w
                
                #line 116
                    itof r1.w, r0.x
                    add r1.w, r1.w, r1.z
                    ftou r1.w, r1.w
                    mov r1.w, cb1[r1.w + 0].x  // r1.w <- weight
                
                #line 119
                    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t1.xyzw, s1, l(0.000000)
                    mul r5.xyzw, r1.wwww, r5.xyzw
                    add r4.xyzw, r4.xyzw, r5.xyzw
                
                #line 122
                    add r0.w, r0.w, r1.w
                
                #line 123
                  endif 
                
                #line 96
                  add r1.z, r1.z, l(1.000000)
                
                #line 124
                endloop 
                
                #line 127
                div o0.xyzw, r4.xyzw, r0.wwww
                ret 
                // Approximately 47 instruction slots used
                            
            };
        }

    }

    technique11 VertBlur
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o1.x <- <VS return value>.Tex.x; o1.y <- <VS return value>.Tex.y; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 69 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoBlur.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosH.x; r0.y <- vout.PosH.y; r0.z <- vout.PosH.z
                mov r0.w, l(1.000000)  // r0.w <- vout.PosH.w
                
                #line 72
                mov r1.xy, v2.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y
                
                #line 74
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float gTexelWidth;                 // Offset:    0 Size:     4 [unused]
                //   float gTexelHeight;                // Offset:    4 Size:     4
                //
                // }
                //
                // cbuffer cbSettings
                // {
                //
                //   float gWeights[11];                // Offset:    0 Size:   164
                //      = 0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3e4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3dcccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samNormalDepth                    sampler      NA          NA             s0      1 
                // samInputImage                     sampler      NA          NA             s1      1 
                // gNormalDepthMap                   texture  float4          2d             t0      1 
                // gInputImage                       texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbSettings                        cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[11], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 28 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoBlur.fx"
                mov r0.x, l(5)  // r0.x <- gBlurRadius
                
                #line 87
                mov r1.x, l(0)  // r1.x <- texOffset.x
                mov r1.y, cb0[0].y  // r1.y <- texOffset.y
                
                #line 91
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)
                mul r2.xyzw, r2.xyzw, cb1[5].xxxx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z; r2.w <- color.w
                
                #line 92
                mov r0.y, cb1[5].x  // r0.y <- totalWeight
                
                #line 94
                sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r3.x <- centerNormalDepth.x; r3.y <- centerNormalDepth.y; r3.z <- centerNormalDepth.z; r3.w <- centerNormalDepth.w
                
                #line 96
                itof r0.z, l(-5)  // r0.z <- i
                mov r4.xyzw, r2.xyzw  // r4.x <- color.x; r4.y <- color.y; r4.z <- color.z; r4.w <- color.w
                mov r0.w, r0.y  // r0.w <- totalWeight
                mov r1.z, r0.z  // r1.z <- i
                loop 
                  itof r1.w, r0.x
                  ge r1.w, r1.w, r1.z
                  breakc_z r1.w
                
                #line 99
                  itof r1.w, l(0)
                  eq r5.x, r1.w, r1.z
                  if_nz r5.x
                    mov r1.w, r1.w  // r1.w <- i
                
                #line 100
                    add r1.z, r1.w, l(1.000000)  // r1.z <- i
                    continue 
                  endif 
                
                #line 102
                  mul r5.xy, r1.xyxx, r1.zzzz
                  add r5.xy, r5.xyxx, v1.xyxx  // r5.x <- tex.x; r5.y <- tex.y
                
                #line 104
                  sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)  // r6.x <- neighborNormalDepth.x; r6.y <- neighborNormalDepth.y; r6.z <- neighborNormalDepth.z; r6.w <- neighborNormalDepth.w
                
                #line 113
                  dp3 r1.w, r6.xyzx, r3.xyzx
                  ge r1.w, r1.w, l(0.800000)
                  mov r5.z, -r3.w
                  add r5.z, r5.z, r6.w
                  mov r5.w, -r5.z
                  max r5.z, r5.w, r5.z
                  ge r5.z, l(0.200000), r5.z
                  and r1.w, r1.w, r5.z
                  if_nz r1.w
                
                #line 116
                    itof r1.w, r0.x
                    add r1.w, r1.w, r1.z
                    ftou r1.w, r1.w
                    mov r1.w, cb1[r1.w + 0].x  // r1.w <- weight
                
                #line 119
                    sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t1.xyzw, s1, l(0.000000)
                    mul r5.xyzw, r1.wwww, r5.xyzw
                    add r4.xyzw, r4.xyzw, r5.xyzw
                
                #line 122
                    add r0.w, r0.w, r1.w
                
                #line 123
                  endif 
                
                #line 96
                  add r1.z, r1.z, l(1.000000)
                
                #line 124
                endloop 
                
                #line 127
                div o0.xyzw, r4.xyzw, r0.wwww
                ret 
                // Approximately 47 instruction slots used
                            
            };
        }

    }

}

