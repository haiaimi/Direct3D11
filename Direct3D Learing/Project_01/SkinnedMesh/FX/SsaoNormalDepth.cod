//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldView;                // Offset:    0, size:   64
    float4x4 gWorldInvTransposeView;    // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
}

cbuffer cbSkinned
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 NormalDepth
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldView;               // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalV.x; o2.y <- <VS return value>.NormalV.y; o2.z <- <VS return value>.NormalV.z; 
                //   o1.x <- <VS return value>.PosV.x; o1.y <- <VS return value>.PosV.y; o1.z <- <VS return value>.PosV.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 60 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosV.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosV.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosV.z
                
                #line 61
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // r2.x <- vout.NormalV.x
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // r2.y <- vout.NormalV.y
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // r2.z <- vout.NormalV.z
                
                #line 64
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 67
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // r4.y <- vout.Tex.y
                
                #line 69
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float     z 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosV.x; v1.y <- pin.PosV.y; v1.z <- pin.PosV.z; 
                //   v2.x <- pin.NormalV.x; v2.y <- pin.NormalV.y; v2.z <- pin.NormalV.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 109 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalV.x; r0.y <- pin.NormalV.y; r0.z <- pin.NormalV.z
                
                #line 118
                mov o0.xyz, r0.xyzx
                mov o0.w, v1.z
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 NormalDepthAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldView;               // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalV.x; o2.y <- <VS return value>.NormalV.y; o2.z <- <VS return value>.NormalV.z; 
                //   o1.x <- <VS return value>.PosV.x; o1.y <- <VS return value>.PosV.y; o1.z <- <VS return value>.PosV.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 60 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosV.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosV.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosV.z
                
                #line 61
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // r2.x <- vout.NormalV.x
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // r2.y <- vout.NormalV.y
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // r2.z <- vout.NormalV.z
                
                #line 64
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 67
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // r4.y <- vout.Tex.y
                
                #line 69
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float     z 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosV.x; v1.y <- pin.PosV.y; v1.z <- pin.PosV.z; 
                //   v2.x <- pin.NormalV.x; v2.y <- pin.NormalV.y; v2.z <- pin.NormalV.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 109 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalV.x; r0.y <- pin.NormalV.y; r0.z <- pin.NormalV.z
                
                #line 113
                sample_indexable(texture2d)(float,float,float,float) r0.w, v3.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // r0.w <- texColor.w
                
                #line 115
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 118
                mov o0.xyz, r0.xyzx
                mov o0.w, v1.z
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

    technique11 NormalDepthSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldView;               // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyzw        3     NONE   float       
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; v3.w <- vin.TangentL.w; 
                //   v4.x <- vin.Weights.x; v4.y <- vin.Weights.y; v4.z <- vin.Weights.z; 
                //   v5.x <- vin.BoneIndices.x; v5.y <- vin.BoneIndices.y; v5.z <- vin.BoneIndices.z; v5.w <- vin.BoneIndices.w; 
                //   o3.x <- <SkinnedVS return value>.Tex.x; o3.y <- <SkinnedVS return value>.Tex.y; 
                //   o2.x <- <SkinnedVS return value>.NormalV.x; o2.y <- <SkinnedVS return value>.NormalV.y; o2.z <- <SkinnedVS return value>.NormalV.z; 
                //   o1.x <- <SkinnedVS return value>.PosV.x; o1.y <- <SkinnedVS return value>.PosV.y; o1.z <- <SkinnedVS return value>.PosV.z; 
                //   o0.x <- <SkinnedVS return value>.PosH.x; o0.y <- <SkinnedVS return value>.PosH.y; o0.z <- <SkinnedVS return value>.PosH.z; o0.w <- <SkinnedVS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 78 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                mov x0[0].x, v4.x
                
                #line 79
                mov x0[1].x, v4.y
                
                #line 80
                mov x0[2].x, v4.z
                
                #line 81
                mov r0.x, x0[0].x
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, x0[1].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov r0.y, x0[2].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x
                
                #line 83
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 84
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 85
                mov r0.w, l(0)  // r0.w <- i
                mov r2.xyz, r0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                mov r3.xyz, r1.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                mov r1.w, r0.w  // r1.w <- i
                loop 
                  ilt r3.w, r1.w, l(4)
                  breakc_z r3.w
                
                #line 89
                  mov r3.w, x0[r1.w + 0].x
                  and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                  or r4.xy, r4.ywyy, r4.xzxx
                  or r4.x, r4.y, r4.x
                  imul null, r4.x, r4.x, l(4)
                  mov r5.xyz, v0.xyzx
                  mov r5.w, l(1.000000)
                  dp4 r6.x, r5.xyzw, cb1[r4.x + 0].xyzw
                  dp4 r6.y, r5.xyzw, cb1[r4.x + 1].xyzw
                  dp4 r6.z, r5.xyzw, cb1[r4.x + 2].xyzw
                  mul r4.xyz, r3.wwww, r6.xyzx
                  add r2.xyz, r2.xyzx, r4.xyzx
                
                #line 90
                  mov r3.w, x0[r1.w + 0].x
                  and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                  or r4.xy, r4.ywyy, r4.xzxx
                  or r4.x, r4.y, r4.x
                  imul null, r4.x, r4.x, l(4)
                  dp3 r5.x, v1.xyzx, cb1[r4.x + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb1[r4.x + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb1[r4.x + 2].xyzx
                  mul r4.xyz, r3.wwww, r5.xyzx
                  add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 91
                  iadd r1.w, r1.w, l(1)
                endloop 
                
                #line 94
                mov r2.w, l(1.000000)
                dp4 r0.x, r2.xyzw, cb0[0].xyzw  // r0.x <- vout.PosV.x
                dp4 r0.y, r2.xyzw, cb0[1].xyzw  // r0.y <- vout.PosV.y
                dp4 r0.z, r2.xyzw, cb0[2].xyzw  // r0.z <- vout.PosV.z
                
                #line 95
                dp3 r1.x, r3.xyzx, cb0[4].xyzx  // r1.x <- vout.NormalV.x
                dp3 r1.y, r3.xyzx, cb0[5].xyzx  // r1.y <- vout.NormalV.y
                dp3 r1.z, r3.xyzx, cb0[6].xyzx  // r1.z <- vout.NormalV.z
                
                #line 98
                dp4 r3.x, r2.xyzw, cb0[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r2.xyzw, cb0[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r2.xyzw, cb0[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r2.xyzw, cb0[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                mov r2.xy, v2.xyxx
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.x, r2.xyzw, cb0[12].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r2.xyzw, cb0[13].xyzw  // r4.y <- vout.Tex.y
                
                #line 103
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 66 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float     z 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosV.x; v1.y <- pin.PosV.y; v1.z <- pin.PosV.z; 
                //   v2.x <- pin.NormalV.x; v2.y <- pin.NormalV.y; v2.z <- pin.NormalV.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 109 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalV.x; r0.y <- pin.NormalV.y; r0.z <- pin.NormalV.z
                
                #line 118
                mov o0.xyz, r0.xyzx
                mov o0.w, v1.z
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 NormalDepthAlphaClipSkinned
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldView;               // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeView;   // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                // cbSkinned                         cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyzw        3     NONE   float       
                // WEIGHTS                  0   xyz         4     NONE   float   xyz 
                // BONEINDICES              0   xyzw        5     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_constantbuffer CB1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; v3.w <- vin.TangentL.w; 
                //   v4.x <- vin.Weights.x; v4.y <- vin.Weights.y; v4.z <- vin.Weights.z; 
                //   v5.x <- vin.BoneIndices.x; v5.y <- vin.BoneIndices.y; v5.z <- vin.BoneIndices.z; v5.w <- vin.BoneIndices.w; 
                //   o3.x <- <SkinnedVS return value>.Tex.x; o3.y <- <SkinnedVS return value>.Tex.y; 
                //   o2.x <- <SkinnedVS return value>.NormalV.x; o2.y <- <SkinnedVS return value>.NormalV.y; o2.z <- <SkinnedVS return value>.NormalV.z; 
                //   o1.x <- <SkinnedVS return value>.PosV.x; o1.y <- <SkinnedVS return value>.PosV.y; o1.z <- <SkinnedVS return value>.PosV.z; 
                //   o0.x <- <SkinnedVS return value>.PosH.x; o0.y <- <SkinnedVS return value>.PosH.y; o0.z <- <SkinnedVS return value>.PosH.z; o0.w <- <SkinnedVS return value>.PosH.w; 
                //   x0 <- weights
                //
                #line 78 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                mov x0[0].x, v4.x
                
                #line 79
                mov x0[1].x, v4.y
                
                #line 80
                mov x0[2].x, v4.z
                
                #line 81
                mov r0.x, x0[0].x
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, x0[1].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov r0.y, x0[2].x
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x
                
                #line 83
                mov r0.xyz, l(0,0,0,0)  // r0.x <- posL.x; r0.y <- posL.y; r0.z <- posL.z
                
                #line 84
                mov r1.xyz, l(0,0,0,0)  // r1.x <- normalL.x; r1.y <- normalL.y; r1.z <- normalL.z
                
                #line 85
                mov r0.w, l(0)  // r0.w <- i
                mov r2.xyz, r0.xyzx  // r2.x <- posL.x; r2.y <- posL.y; r2.z <- posL.z
                mov r3.xyz, r1.xyzx  // r3.x <- normalL.x; r3.y <- normalL.y; r3.z <- normalL.z
                mov r1.w, r0.w  // r1.w <- i
                loop 
                  ilt r3.w, r1.w, l(4)
                  breakc_z r3.w
                
                #line 89
                  mov r3.w, x0[r1.w + 0].x
                  and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                  or r4.xy, r4.ywyy, r4.xzxx
                  or r4.x, r4.y, r4.x
                  imul null, r4.x, r4.x, l(4)
                  mov r5.xyz, v0.xyzx
                  mov r5.w, l(1.000000)
                  dp4 r6.x, r5.xyzw, cb1[r4.x + 0].xyzw
                  dp4 r6.y, r5.xyzw, cb1[r4.x + 1].xyzw
                  dp4 r6.z, r5.xyzw, cb1[r4.x + 2].xyzw
                  mul r4.xyz, r3.wwww, r6.xyzx
                  add r2.xyz, r2.xyzx, r4.xyzx
                
                #line 90
                  mov r3.w, x0[r1.w + 0].x
                  and r4.xyzw, v5.xyzw, icb[r1.w + 0].xyzw
                  or r4.xy, r4.ywyy, r4.xzxx
                  or r4.x, r4.y, r4.x
                  imul null, r4.x, r4.x, l(4)
                  dp3 r5.x, v1.xyzx, cb1[r4.x + 0].xyzx
                  dp3 r5.y, v1.xyzx, cb1[r4.x + 1].xyzx
                  dp3 r5.z, v1.xyzx, cb1[r4.x + 2].xyzx
                  mul r4.xyz, r3.wwww, r5.xyzx
                  add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 91
                  iadd r1.w, r1.w, l(1)
                endloop 
                
                #line 94
                mov r2.w, l(1.000000)
                dp4 r0.x, r2.xyzw, cb0[0].xyzw  // r0.x <- vout.PosV.x
                dp4 r0.y, r2.xyzw, cb0[1].xyzw  // r0.y <- vout.PosV.y
                dp4 r0.z, r2.xyzw, cb0[2].xyzw  // r0.z <- vout.PosV.z
                
                #line 95
                dp3 r1.x, r3.xyzx, cb0[4].xyzx  // r1.x <- vout.NormalV.x
                dp3 r1.y, r3.xyzx, cb0[5].xyzx  // r1.y <- vout.NormalV.y
                dp3 r1.z, r3.xyzx, cb0[6].xyzx  // r1.z <- vout.NormalV.z
                
                #line 98
                dp4 r3.x, r2.xyzw, cb0[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r2.xyzw, cb0[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r2.xyzw, cb0[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r2.xyzw, cb0[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                mov r2.xy, v2.xyxx
                mov r2.zw, l(0,0,0,1.000000)
                dp4 r4.x, r2.xyzw, cb0[12].xyzw  // r4.x <- vout.Tex.x
                dp4 r4.y, r2.xyzw, cb0[13].xyzw  // r4.y <- vout.Tex.y
                
                #line 103
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 66 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float     z 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.z
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosV.x; v1.y <- pin.PosV.y; v1.z <- pin.PosV.z; 
                //   v2.x <- pin.NormalV.x; v2.y <- pin.NormalV.y; v2.z <- pin.NormalV.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 109 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\SsaoNormalDepth.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalV.x; r0.y <- pin.NormalV.y; r0.z <- pin.NormalV.z
                
                #line 113
                sample_indexable(texture2d)(float,float,float,float) r0.w, v3.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // r0.w <- texColor.w
                
                #line 115
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 118
                mov o0.xyz, r0.xyzx
                mov o0.w, v1.z
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

}

