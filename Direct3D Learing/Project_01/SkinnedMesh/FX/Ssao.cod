//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gViewToTexSpace;           // Offset:    0, size:   64
    float4  gOffsetVectors[14];         // Offset:   64, size:  224
    float4  gFrustumCorners[4];         // Offset:  288, size:   64
    float   gOcclusionRadius = 0.5;     // Offset:  352, size:    4
    float   gOcclusionFadeStart = 0.200000003;// Offset:  356, size:    4
    float   gOcclusionFadeEnd = 2;      // Offset:  360, size:    4
    float   gSurfaceEpsilon = 0.0500000007;// Offset:  364, size:    4
}

//
// 4 local object(s)
//
Texture2D gNormalDepthMap;
Texture2D gRandomVecMap;
SamplerState samNormalDepth
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 100000);
};
SamplerState samRandomVec
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Ssao
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64 [unused]
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224 [unused]
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64
                //   float gOcclusionRadius;            // Offset:  352 Size:     4 [unused]
                //      = 0x3f000000 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4 [unused]
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4 [unused]
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4 [unused]
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   x   
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[22], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.x
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.ToFarPlaneIndex.x; v1.y <- vin.ToFarPlaneIndex.y; v1.z <- vin.ToFarPlaneIndex.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.ToFarPlane.x; o1.y <- <VS return value>.ToFarPlane.y; o1.z <- <VS return value>.ToFarPlane.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 61 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\Ssao.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosH.x; r0.y <- vout.PosH.y; r0.z <- vout.PosH.z
                mov r0.w, l(1.000000)  // r0.w <- vout.PosH.w
                
                #line 64
                ftou r1.x, v1.x
                mov r1.xyz, cb0[r1.x + 18].xyzx  // r1.x <- vout.ToFarPlane.x; r1.y <- vout.ToFarPlane.y; r1.z <- vout.ToFarPlane.z
                
                #line 67
                mov r2.xy, v2.xyxx  // r2.x <- vout.Tex.x; r2.y <- vout.Tex.y
                
                #line 69
                mov o0.xyzw, r0.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xy, r2.xyxx
                ret 
                // Approximately 9 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewToTexSpace;          // Offset:    0 Size:    64
                //   float4 gOffsetVectors[14];         // Offset:   64 Size:   224
                //   float4 gFrustumCorners[4];         // Offset:  288 Size:    64 [unused]
                //   float gOcclusionRadius;            // Offset:  352 Size:     4
                //      = 0x3f000000 
                //   float gOcclusionFadeStart;         // Offset:  356 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeEnd;           // Offset:  360 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  364 Size:     4
                //      = 0x3d4ccccd 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samNormalDepth                    sampler      NA          NA             s0      1 
                // samRandomVec                      sampler      NA          NA             s1      1 
                // gNormalDepthMap                   texture  float4          2d             t0      1 
                // gRandomVecMap                     texture  float4          2d             t1      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[23], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ToFarPlane.x; v1.y <- pin.ToFarPlane.y; v1.z <- pin.ToFarPlane.z; 
                //   v2.x <- pin.Tex.x; v2.y <- pin.Tex.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 108 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 25 Character Animation\SkinnedMesh\FX\Ssao.fx"
                mov r0.x, l(14)  // r0.x <- gSampleCount
                
                #line 117
                sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0, l(0.000000)  // r1.x <- normalDepth.x; r1.y <- normalDepth.y; r1.z <- normalDepth.z; r1.w <- normalDepth.w
                
                #line 119
                mov r1.xyz, r1.xyzx  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z
                
                #line 120
                mov r1.w, r1.w  // r1.w <- pz
                
                #line 128
                div r0.y, r1.w, v1.z
                mul r0.yzw, r0.yyyy, v1.xxyz  // r0.y <- p.x; r0.z <- p.y; r0.w <- p.z
                
                #line 131
                mul r2.xy, v2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s1, l(0.000000)
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r3.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- randVec.x; r2.y <- randVec.y; r2.z <- randVec.z
                
                #line 133
                mov r1.w, l(0)  // r1.w <- occlusionSum
                
                #line 142
                dp3 r2.w, cb0[4].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[4].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[5].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[5].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[6].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[6].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[7].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[7].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[8].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[8].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[9].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[9].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[10].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[10].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[11].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[11].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[12].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[13].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[13].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[14].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[14].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[15].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[15].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[16].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r3.xyz, r2.wwww, r2.xyzx
                add r3.xyz, r3.xyzx, cb0[16].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                
                #line 145
                dp3 r2.w, r3.xyzx, r1.xyzx
                lt r3.w, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.w, r3.w
                iadd r2.w, r2.w, r3.w
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r3.xyz, r3.xyzx, r2.wwww
                add r3.xyz, r0.yzwy, r3.xyzx  // r3.x <- q.x; r3.y <- q.y; r3.z <- q.z
                
                #line 151
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[0].xyzw  // r4.x <- projQ.x
                dp4 r4.y, r3.xyzw, cb0[1].xyzw  // r4.y <- projQ.y
                dp4 r2.w, r3.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r4.xy, r4.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r3.z
                mul r3.xyz, r3.xyzx, r2.wwww  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z
                
                #line 178
                mov r2.w, -r3.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r4.xyz, -r0.yzwy
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r3.w, r3.xyzx, r3.xyzx
                rsq r3.w, r3.w
                mul r3.xyz, r3.wwww, r3.xyzx
                dp3 r3.x, r1.xyzx, r3.xyzx
                max r3.x, r3.x, l(0.000000)  // r3.x <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r3.y, l(0)  // r3.y <- occlusion
                
                #line 96
                lt r3.z, cb0[22].w, r2.w
                if_nz r3.z
                
                #line 98
                  mov r3.z, -cb0[22].y
                  add r3.z, r3.z, cb0[22].z  // r3.z <- fadeLength
                
                #line 102
                  mov r2.w, -r2.w
                  add r2.w, r2.w, cb0[22].z
                  div r2.w, r2.w, r3.z
                  max r2.w, r2.w, l(0.000000)
                  min r3.y, r2.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r3.y, r3.y  // r3.y <- <OcclusionFunction return value>
                
                #line 180
                mul r2.w, r3.y, r3.x  // r2.w <- occlusion
                
                #line 182
                add r1.w, r1.w, r2.w
                
                #line 142
                dp3 r2.w, cb0[17].xyzx, r2.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r2.xyz, r2.wwww, r2.xyzx
                add r2.xyz, r2.xyzx, cb0[17].xyzx  // r2.x <- offset.x; r2.y <- offset.y; r2.z <- offset.z
                
                #line 145
                dp3 r2.w, r2.xyzx, r1.xyzx
                lt r3.x, l(0.000000), r2.w
                lt r2.w, r2.w, l(0.000000)
                ineg r3.x, r3.x
                iadd r2.w, r2.w, r3.x
                itof r2.w, r2.w  // r2.w <- flip
                
                #line 148
                mul r2.w, r2.w, cb0[22].x
                mul r2.xyz, r2.xyzx, r2.wwww
                add r2.xyz, r0.yzwy, r2.xyzx  // r2.x <- q.x; r2.y <- q.y; r2.z <- q.z
                
                #line 151
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[0].xyzw  // r3.x <- projQ.x
                dp4 r3.y, r2.xyzw, cb0[1].xyzw  // r3.y <- projQ.y
                dp4 r2.w, r2.xyzw, cb0[3].xyzw  // r2.w <- projQ.w
                
                #line 152
                div r3.xy, r3.xyxx, r2.wwww
                
                #line 158
                sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t0.xyzw, s0, l(0.000000)
                mov r2.w, r2.w  // r2.w <- rz
                
                #line 164
                div r2.w, r2.w, r2.z
                mul r2.xyz, r2.xyzx, r2.wwww  // r2.x <- r.x; r2.y <- r.y; r2.z <- r.z
                
                #line 178
                mov r2.w, -r2.z
                add r2.w, r0.w, r2.w  // r2.w <- distZ
                
                #line 179
                mov r0.yzw, -r0.yyzw
                add r0.yzw, r0.yyzw, r2.xxyz
                dp3 r2.x, r0.yzwy, r0.yzwy
                rsq r2.x, r2.x
                mul r0.yzw, r0.yyzw, r2.xxxx
                dp3 r0.y, r1.xyzx, r0.yzwy
                max r0.y, r0.y, l(0.000000)  // r0.y <- dp
                
                #line 180
                nop 
                mov r2.w, r2.w  // r2.w <- distZ
                
                #line 95
                mov r0.z, l(0)  // r0.z <- occlusion
                
                #line 96
                lt r0.w, cb0[22].w, r2.w
                if_nz r0.w
                
                #line 98
                  mov r0.w, -cb0[22].y
                  add r0.w, r0.w, cb0[22].z  // r0.w <- fadeLength
                
                #line 102
                  mov r1.x, -r2.w
                  add r1.x, r1.x, cb0[22].z
                  div r0.w, r1.x, r0.w
                  max r0.w, r0.w, l(0.000000)
                  min r0.z, r0.w, l(1.000000)
                
                #line 103
                endif 
                
                #line 105
                mov r0.z, r0.z  // r0.z <- <OcclusionFunction return value>
                
                #line 180
                mul r0.y, r0.z, r0.y  // r0.y <- occlusion
                
                #line 182
                add r0.y, r0.y, r1.w  // r0.y <- occlusionSum
                
                #line 185
                itof r0.x, r0.x
                div r0.x, r0.y, r0.x  // r0.x <- occlusionSum
                
                #line 187
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // r0.x <- access
                
                #line 190
                mov r0.y, l(1.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                min o0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)
                ret 
                // Approximately 695 instruction slots used
                            
            };
        }

    }

}

