//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Tess
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_output o0.xyz
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 49 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 13 The Tessellation Stages\BasicTessellation_Exc_iscoahedron\FX\Tessellation.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- vout.PosL.x; r0.y <- vout.PosL.y; r0.z <- vout.PosL.z
                
                #line 51
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 3 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(16.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[3], immediateIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_output o0.xyz
                dcl_temps 1
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o0.x <- <HS return value>.PosL.x; o0.y <- <HS return value>.PosL.y; o0.z <- <HS return value>.PosL.z; 
                //   v[0][0].x <- p[0].PosL.x; v[0][0].y <- p[0].PosL.y; v[0][0].z <- p[0].PosL.z; 
                //   v[1][0].x <- p[1].PosL.x; v[1][0].y <- p[1].PosL.y; v[1][0].z <- p[1].PosL.z; 
                //   v[2][0].x <- p[2].PosL.x; v[2][0].y <- p[2].PosL.y; v[2][0].z <- p[2].PosL.z
                //
                #line 107 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 13 The Tessellation Stages\BasicTessellation_Exc_iscoahedron\FX\Tessellation.fx"
                mov r0.x, vOutputControlPointID
                mov r0.xyz, v[r0.x + 0][0].xyzx  // r0.x <- hout.PosL.x; r0.y <- hout.PosL.y; r0.z <- hout.PosL.z
                
                #line 109
                mov o0.xyz, r0.xyzx
                ret 
                hs_join_phase 
                dcl_input vicp[3][0].xyz
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 2
                
                #line 65
                add r0.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[2][0].xyzx
                mul r0.xyz, r0.xyzx, l(0.330000, 0.330000, 0.330000, 0.000000)  // r0.x <- centerL.x; r0.y <- centerL.y; r0.z <- centerL.z
                
                #line 66
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // r1.x <- centerW.x
                dp4 r1.y, r0.xyzw, cb1[1].xyzw  // r1.y <- centerW.y
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // r1.z <- centerW.z
                
                #line 68
                mov r0.xyz, -cb0[12].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // r0.x <- d
                
                #line 75
                mov r0.y, l(100.000000)  // r0.y <- d1
                
                #line 76
                mov r0.x, -r0.x
                add r0.x, r0.x, r0.y
                div r0.x, r0.x, l(80.000000)
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r0.w, r0.x, l(16.000000)  // r0.w <- tess
                
                #line 80
                mov r0.x, r0.w  // r0.x <- pt.EdgeTess[0]
                
                #line 81
                mov r0.y, r0.w  // r0.y <- pt.EdgeTess[1]
                
                #line 82
                mov r0.z, r0.w  // r0.z <- pt.EdgeTess[2]
                
                #line 84
                mov r0.w, r0.w  // r0.w <- pt.InsideTess[0]
                
                #line 86
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[0]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[1]
                mov r0.z, r0.z  // r0.z <- <ConstantHS return value>.EdgeTess[2]
                mov r0.w, r0.w  // r0.w <- <ConstantHS return value>.InsideTess[0]
                min r0.xyzw, r0.xyzw, l(16.000000, 16.000000, 16.000000, 16.000000)
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.InsideTess[0]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; vDomain.z <- uv.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- quad[0].PosL.x; vicp[0][0].y <- quad[0].PosL.y; vicp[0][0].z <- quad[0].PosL.z; 
                //   vicp[1][0].x <- quad[1].PosL.x; vicp[1][0].y <- quad[1].PosL.y; vicp[1][0].z <- quad[1].PosL.z; 
                //   vicp[2][0].x <- quad[2].PosL.x; vicp[2][0].y <- quad[2].PosL.y; vicp[2][0].z <- quad[2].PosL.z
                //
                #line 127 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 13 The Tessellation Stages\BasicTessellation_Exc_iscoahedron\FX\Tessellation.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z
                
                #line 131
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx
                
                #line 133
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- dout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- dout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- dout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- dout.PosH.w
                
                #line 135
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 15 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 140 "D:\vs项目\Introduction-to-3D-Game-Programming-With-DirectX11-master\Chapter 13 The Tessellation Stages\BasicTessellation_Exc_iscoahedron\FX\Tessellation.fx"
                mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

